---
name: "Tailscale QEMU Runner Action"
description: "A GitHub Action to start an ephemeral QEMU-based runner VM via Tailscale."
branding:
  icon: "terminal"
  color: "purple"
inputs:
  gh-api-token:
    description: "A GitHub Personal Access Token with `repo` scope, or a fine-grained access token with `administration:write` permission."
    required: true
  gha-runner-apt-mirror:
    default: "http://archive.ubuntu.com/ubuntu"
    description: "The APT mirror to configure in the self-hosted runner VM."
    required: false
  gha-runner-cpus:
    default: "4"
    description: "The number of CPUs to allocate to the self-hosted runner VM."
    required: false
  gha-runner-debug:
    default: "disabled"
    description: "Configures debug mode on the self-hosted runner VM."
    required: false
  gha-runner-disk:
    default: "16G"
    description: "The size of the self-hosted runner VM disk."
    required: false
  gha-runner-labels:
    default: "self-hosted"
    description: "The labels to apply to the self-hosted runner VM."
    required: false
  gha-runner-mem:
    default: "16G"
    description: "The amount of memory to allocate to the self-hosted runner VM."
    required: false
  gha-runner-sha:
    default: "0dbc9bf5a58620fc52cb6cc0448abcca964a8d74b5f39773b7afcad9ab691e19"
    description: "The SHA256 checksum of the self-hosted runner tarball."
    required: false
  gha-runner-tz:
    default: "UTC"
    description: "The timezone to configure in the self-hosted runner VM."
    required: false
  gha-runner-version:
    default: "2.323.0"
    description: "The version of self-hosted runner to install."
    required: false
  ssh-host:
    description: "The tailnet hostname or tailnet IP address of the hypervisor for the self-hosted runner VM."
    required: true
  ssh-keyscan-timeout:
    default: "60"
    description: "The timeout value for `ssh-keyscan` in seconds."
    required: false
  ssh-user:
    description: "The SSH username to use when logging into your Docker host."
    required: true
  ts-oauth-client-id:
    description: "Your Tailscale OAuth Client ID."
    required: true
  ts-oauth-secret:
    description: "Your Tailscale OAuth Client Secret."
    required: true
  ts-tag:
    default: "github-actions"
    description: "A unique tag to apply to ephemeral Tailscale nodes."
    required: false
  ts-version:
    default: "latest"
    description: "The Tailscale client version to use."
    required: false
runs:
  using: "composite"
  steps:
    - id: start-tailscale
      name: Start Tailscale
      uses: tailscale/github-action@5d536117a7378beffcd6d8523ce73c50fa98684d # v3.2.1
      with:
        oauth-client-id: ${{ inputs.ts-oauth-client-id }}
        oauth-secret: ${{ inputs.ts-oauth-secret }}
        tags: tag:${{ inputs.ts-tag }}
        version: ${{ inputs.ts-version }}
    - id: install-cloud-utils
      name: Install cloud-utils
      run: sudo apt-get update && sudo apt-get --no-install-recommends --yes install cloud-utils
      shell: bash
    - id: generate-runner-id
      name: Generate self-hosted runner ID
      run: |
        set -ex
        echo "runner-id=$(uuidgen)" >> "$GITHUB_OUTPUT"
      shell: bash
    - id: get-token
      name: Get self-hosted runner registration token
      run: |
        reg_token=$(curl -L \
          -X POST \
          -H 'Accept: application/vnd.github+json' \
          -H 'Authorization: Bearer ${{ inputs.gh-api-token }}' \
          -H 'X-GitHub-Api-Version: 2022-11-28' https://api.github.com/repos/${{ github.repository }}/actions/runners/registration-token \
          | jq -r .token)
        echo "::add-mask::$reg_token"
        echo "reg-token=$reg_token" >> "$GITHUB_OUTPUT"
      shell: bash
    - id: create-seed
      name: Create seed.img
      run: |
        cat > meta-data <<EOF
        instance-id: ${{ steps.generate-runner-id.outputs.runner-id }}
        local-hostname: ${{ steps.generate-runner-id.outputs.runner-id }}
        EOF
        cat > user-data <<EOF
        #cloud-config
        apt:
          conf: |
            APT {
              Assume-Yes 'true';
              Fix-Broken 'true';
              Install-Recommends 'false';
              Install-Suggests 'false';
            }
          primary:
            - arches: [default]
              uri: ${{ inputs.gha-runner-apt-mirror }}
          sources:
            docker:
              source: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu noble stable'
              key: |
                -----BEGIN PGP PUBLIC KEY BLOCK-----
                
                mQINBFit2ioBEADhWpZ8/wvZ6hUTiXOwQHXMAlaFHcPH9hAtr4F1y2+OYdbtMuth
                lqqwp028AqyY+PRfVMtSYMbjuQuu5byyKR01BbqYhuS3jtqQmljZ/bJvXqnmiVXh
                38UuLa+z077PxyxQhu5BbqntTPQMfiyqEiU+BKbq2WmANUKQf+1AmZY/IruOXbnq
                L4C1+gJ8vfmXQt99npCaxEjaNRVYfOS8QcixNzHUYnb6emjlANyEVlZzeqo7XKl7
                UrwV5inawTSzWNvtjEjj4nJL8NsLwscpLPQUhTQ+7BbQXAwAmeHCUTQIvvWXqw0N
                cmhh4HgeQscQHYgOJjjDVfoY5MucvglbIgCqfzAHW9jxmRL4qbMZj+b1XoePEtht
                ku4bIQN1X5P07fNWzlgaRL5Z4POXDDZTlIQ/El58j9kp4bnWRCJW0lya+f8ocodo
                vZZ+Doi+fy4D5ZGrL4XEcIQP/Lv5uFyf+kQtl/94VFYVJOleAv8W92KdgDkhTcTD
                G7c0tIkVEKNUq48b3aQ64NOZQW7fVjfoKwEZdOqPE72Pa45jrZzvUFxSpdiNk2tZ
                XYukHjlxxEgBdC/J3cMMNRE1F4NCA3ApfV1Y7/hTeOnmDuDYwr9/obA8t016Yljj
                q5rdkywPf4JF8mXUW5eCN1vAFHxeg9ZWemhBtQmGxXnw9M+z6hWwc6ahmwARAQAB
                tCtEb2NrZXIgUmVsZWFzZSAoQ0UgZGViKSA8ZG9ja2VyQGRvY2tlci5jb20+iQI3
                BBMBCgAhBQJYrefAAhsvBQsJCAcDBRUKCQgLBRYCAwEAAh4BAheAAAoJEI2BgDwO
                v82IsskP/iQZo68flDQmNvn8X5XTd6RRaUH33kXYXquT6NkHJciS7E2gTJmqvMqd
                tI4mNYHCSEYxI5qrcYV5YqX9P6+Ko+vozo4nseUQLPH/ATQ4qL0Zok+1jkag3Lgk
                jonyUf9bwtWxFp05HC3GMHPhhcUSexCxQLQvnFWXD2sWLKivHp2fT8QbRGeZ+d3m
                6fqcd5Fu7pxsqm0EUDK5NL+nPIgYhN+auTrhgzhK1CShfGccM/wfRlei9Utz6p9P
                XRKIlWnXtT4qNGZNTN0tR+NLG/6Bqd8OYBaFAUcue/w1VW6JQ2VGYZHnZu9S8LMc
                FYBa5Ig9PxwGQOgq6RDKDbV+PqTQT5EFMeR1mrjckk4DQJjbxeMZbiNMG5kGECA8
                g383P3elhn03WGbEEa4MNc3Z4+7c236QI3xWJfNPdUbXRaAwhy/6rTSFbzwKB0Jm
                ebwzQfwjQY6f55MiI/RqDCyuPj3r3jyVRkK86pQKBAJwFHyqj9KaKXMZjfVnowLh
                9svIGfNbGHpucATqREvUHuQbNnqkCx8VVhtYkhDb9fEP2xBu5VvHbR+3nfVhMut5
                G34Ct5RS7Jt6LIfFdtcn8CaSas/l1HbiGeRgc70X/9aYx/V/CEJv0lIe8gP6uDoW
                FPIZ7d6vH+Vro6xuWEGiuMaiznap2KhZmpkgfupyFmplh0s6knymuQINBFit2ioB
                EADneL9S9m4vhU3blaRjVUUyJ7b/qTjcSylvCH5XUE6R2k+ckEZjfAMZPLpO+/tF
                M2JIJMD4SifKuS3xck9KtZGCufGmcwiLQRzeHF7vJUKrLD5RTkNi23ydvWZgPjtx
                Q+DTT1Zcn7BrQFY6FgnRoUVIxwtdw1bMY/89rsFgS5wwuMESd3Q2RYgb7EOFOpnu
                w6da7WakWf4IhnF5nsNYGDVaIHzpiqCl+uTbf1epCjrOlIzkZ3Z3Yk5CM/TiFzPk
                z2lLz89cpD8U+NtCsfagWWfjd2U3jDapgH+7nQnCEWpROtzaKHG6lA3pXdix5zG8
                eRc6/0IbUSWvfjKxLLPfNeCS2pCL3IeEI5nothEEYdQH6szpLog79xB9dVnJyKJb
                VfxXnseoYqVrRz2VVbUI5Blwm6B40E3eGVfUQWiux54DspyVMMk41Mx7QJ3iynIa
                1N4ZAqVMAEruyXTRTxc9XW0tYhDMA/1GYvz0EmFpm8LzTHA6sFVtPm/ZlNCX6P1X
                zJwrv7DSQKD6GGlBQUX+OeEJ8tTkkf8QTJSPUdh8P8YxDFS5EOGAvhhpMBYD42kQ
                pqXjEC+XcycTvGI7impgv9PDY1RCC1zkBjKPa120rNhv/hkVk/YhuGoajoHyy4h7
                ZQopdcMtpN2dgmhEegny9JCSwxfQmQ0zK0g7m6SHiKMwjwARAQABiQQ+BBgBCAAJ
                BQJYrdoqAhsCAikJEI2BgDwOv82IwV0gBBkBCAAGBQJYrdoqAAoJEH6gqcPyc/zY
                1WAP/2wJ+R0gE6qsce3rjaIz58PJmc8goKrir5hnElWhPgbq7cYIsW5qiFyLhkdp
                YcMmhD9mRiPpQn6Ya2w3e3B8zfIVKipbMBnke/ytZ9M7qHmDCcjoiSmwEXN3wKYI
                mD9VHONsl/CG1rU9Isw1jtB5g1YxuBA7M/m36XN6x2u+NtNMDB9P56yc4gfsZVES
                KA9v+yY2/l45L8d/WUkUi0YXomn6hyBGI7JrBLq0CX37GEYP6O9rrKipfz73XfO7
                JIGzOKZlljb/D9RX/g7nRbCn+3EtH7xnk+TK/50euEKw8SMUg147sJTcpQmv6UzZ
                cM4JgL0HbHVCojV4C/plELwMddALOFeYQzTif6sMRPf+3DSj8frbInjChC3yOLy0
                6br92KFom17EIj2CAcoeq7UPhi2oouYBwPxh5ytdehJkoo+sN7RIWua6P2WSmon5
                U888cSylXC0+ADFdgLX9K2zrDVYUG1vo8CX0vzxFBaHwN6Px26fhIT1/hYUHQR1z
                VfNDcyQmXqkOnZvvoMfz/Q0s9BhFJ/zU6AgQbIZE/hm1spsfgvtsD1frZfygXJ9f
                irP+MSAI80xHSf91qSRZOj4Pl3ZJNbq4yYxv0b1pkMqeGdjdCYhLU+LZ4wbQmpCk
                SVe2prlLureigXtmZfkqevRz7FrIZiu9ky8wnCAPwC7/zmS18rgP/17bOtL4/iIz
                QhxAAoAMWVrGyJivSkjhSGx1uCojsWfsTAm11P7jsruIL61ZzMUVE2aM3Pmj5G+W
                9AcZ58Em+1WsVnAXdUR//bMmhyr8wL/G1YO1V3JEJTRdxsSxdYa4deGBBY/Adpsw
                24jxhOJR+lsJpqIUeb999+R8euDhRHG9eFO7DRu6weatUJ6suupoDTRWtr/4yGqe
                dKxV3qQhNLSnaAzqW/1nA3iUB4k7kCaKZxhdhDbClf9P37qaRW467BLCVO/coL3y
                Vm50dwdrNtKpMBh3ZpbB1uJvgi9mXtyBOMJ3v8RZeDzFiG8HdCtg9RvIt/AIFoHR
                H3S+U79NT6i0KPzLImDfs8T7RlpyuMc4Ufs8ggyg9v3Ae6cN3eQyxcK3w0cbBwsh
                /nQNfsA6uu+9H7NhbehBMhYnpNZyrHzCmzyXkauwRAqoCbGCNykTRwsur9gS41TQ
                M8ssD1jFheOJf3hODnkKU+HKjvMROl1DK7zdmLdNzA1cvtZH/nCC9KPj1z8QC47S
                xx+dTZSx4ONAhwbS/LN3PoKtn8LPjY9NP9uDWI+TWYquS2U+KHDrBDlsgozDbs/O
                jCxcpDzNmXpWQHEtHU7649OXHP7UeNST1mCUCH5qdank0V1iejF6/CfTFU4MfcrG
                YT90qFF93M3v01BbxP+EIY2/9tiIPbrd
                =0YYh
                -----END PGP PUBLIC KEY BLOCK-----
            git-core:
              source: 'ppa:git-core/ppa'
        groups:
          - docker
          - users
        package_update: true
        packages:
          - build-essential
          - ca-certificates
          - containerd.io
          - curl
          - docker-buildx-plugin
          - docker-ce
          - docker-ce-cli
          - docker-compose-plugin
          - git
          - git-lfs
          - jq
          - qemu-guest-agent
          - sudo
        runcmd:
          - [ mkdir, -p, /opt/actions-runner ]
          - [ mkdir, -p, /opt/hostedtoolcache ]
          - [ chown, -R, runner:users, /opt/hostedtoolcache ]
          - [ sudo, -u, runner, -s, /opt/actions-runner/start.sh ]
        timezone: "${{ inputs.gha-runner-tz }}"
        users:
          - name: runner
            groups: docker
            primary_group: users
            sudo: ALL=(ALL) NOPASSWD:ALL
        write_files:
          - content: |
              #!/bin/bash
              cd /opt/actions-runner
              curl -o actions-runner-linux-x64-${{ inputs.gha-runner-version }}.tar.gz -L https://github.com/actions/runner/releases/download/v${{ inputs.gha-runner-version }}/actions-runner-linux-x64-${{ inputs.gha-runner-version }}.tar.gz
              echo "${{ inputs.gha-runner-sha }}  actions-runner-linux-x64-${{ inputs.gha-runner-version }}.tar.gz" | shasum -a 256 -c
              tar xzf actions-runner-linux-x64-${{ inputs.gha-runner-version }}.tar.gz
              sudo /opt/actions-runner/bin/installdependencies.sh
              /opt/actions-runner/config.sh --ephemeral --labels ${{ inputs.gha-runner-labels }} --token ${{ steps.get-token.outputs.reg-token }} --unattended --url https://github.com/${{ github.repository }}
              /opt/actions-runner/run.sh
              sleep 5 && sudo poweroff &
            defer: true
            owner: runner:users
            path: /opt/actions-runner/start.sh
            permissions: '0700'
        EOF
        cloud-localds seed.img user-data meta-data
      shell: bash
    - id: copy-seed
      name: Copy seed.img to hypervisor
      run: |
        ssh -o StrictHostKeyChecking=no ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} /bin/bash <<ENDSSH
          mkdir -p /tmp/actions-runners
        ENDSSH
        scp -o StrictHostKeyChecking=no seed.img ${{ inputs.ssh-user }}@${{ inputs.ssh-host }}:/tmp/actions-runners/${{ steps.generate-runner-id.outputs.runner-id }}-seed.img
      shell: bash
    - id: get-vm-image
      name: Get Ubuntu minimal cloud image (if not present)
      run: |
        ssh -o StrictHostKeyChecking=no ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} /bin/bash <<ENDSSH
          if test ! -s /tmp/actions-runners/ubuntu-24.04-minimal-cloudimg-amd64.img
          then
            wget --progress=dot:mega -P /tmp/actions-runners \
            https://cloud-images.ubuntu.com/minimal/releases/noble/release/ubuntu-24.04-minimal-cloudimg-amd64.img
            qemu-img resize /tmp/actions-runners/ubuntu-24.04-minimal-cloudimg-amd64.img ${{ inputs.gha-runner-disk }}
          fi
        ENDSSH
      shell: bash
    - id: start-runner
      if: ${{ inputs.gha-runner-debug != 'enabled' }}
      name: Start self-hosted runner VM
      run: |
        ssh -o StrictHostKeyChecking=no ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} /bin/bash <<ENDSSH &
          qemu-system-x86_64 -m ${{ inputs.gha-runner-mem }} \
          -cpu host \
          -drive file=/tmp/actions-runners/ubuntu-24.04-minimal-cloudimg-amd64.img,index=0,format=qcow2,media=disk,snapshot=on \
          -drive file=/tmp/actions-runners/${{ steps.generate-runner-id.outputs.runner-id }}-seed.img,index=1,media=cdrom \
          -machine accel=kvm:tcg \
          -net nic,model=virtio \
          -net user \
          -nographic \
          -smp cpus=${{ inputs.gha-runner-cpus }}
        ENDSSH
      shell: bash
    - id: start-runner-debug
      if: ${{ inputs.gha-runner-debug == 'enabled' }}
      name: Start self-hosted runner VM (debug mode)
      run: |
        ssh -o StrictHostKeyChecking=no ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} /bin/bash <<ENDSSH
          qemu-system-x86_64 -m ${{ inputs.gha-runner-mem }} \
          -cpu host \
          -drive file=/tmp/actions-runners/ubuntu-24.04-minimal-cloudimg-amd64.img,index=0,format=qcow2,media=disk,snapshot=on \
          -drive file=/tmp/actions-runners/${{ steps.generate-runner-id.outputs.runner-id }}-seed.img,index=1,media=cdrom \
          -machine accel=kvm:tcg \
          -net nic,model=virtio \
          -net user \
          -nographic \
          -smp cpus=${{ inputs.gha-runner-cpus }}
        ENDSSH
      shell: bash
