---
name: "Tailscale QEMU Runner Action"
description: "A GitHub Action to start an ephemeral QEMU-based runner VM via Tailscale."
branding:
  icon: "terminal"
  color: "purple"
inputs:
  gh-api-token:
    description: "A GitHub Personal Access Token with `repo` scope, or a fine-grained access token with `administration:write` permission."
    required: true
  gha-runner-apt-mirror:
    default: "http://archive.ubuntu.com/ubuntu"
    description: "The APT mirror to configure in the self-hosted runner VM."
    required: false
  gha-runner-cpus:
    default: "4"
    description: "The number of CPUs to allocate to the self-hosted runner VM."
    required: false
  gha-runner-mem:
    default: "16G"
    description: "The amount of memory to allocate to the self-hosted runner VM."
    required: false
  gha-runner-sha:
    default: "ba46ba7ce3a4d7236b16fbe44419fb453bc08f866b24f04d549ec89f1722a29e"
    description: "The SHA256 checksum of the self-hosted runner tarball."
    required: false
  gha-runner-tz:
    default: "UTC"
    description: "The timezone to configure in the self-hosted runner VM."
    required: false
  gha-runner-version:
    default: "2.321.0"
    description: "The version of self-hosted runner to install."
    required: false
  smee-url:
    description: "The URL of the Smee channel to use for GitHub webhook forwarding."
    required: true
  ssh-host:
    description: "The tailnet hostname or tailnet IP address of the hypervisor for the self-hosted runner VM."
    required: true
  ssh-keyscan-timeout:
    default: "60"
    description: "The timeout value for `ssh-keyscan` in seconds."
    required: false
  ssh-user:
    description: "The SSH username to use when logging into your Docker host."
    required: true
  ts-oauth-client-id:
    description: "Your Tailscale OAuth Client ID."
    required: true
  ts-oauth-secret:
    description: "Your Tailscale OAuth Client Secret."
    required: true
  ts-tag:
    default: "github-actions"
    description: "A unique tag to apply to ephemeral Tailscale nodes."
    required: false
  ts-version:
    default: "1.76.6"
    description: "The Tailscale client version to use."
    required: false
runs:
  using: "composite"
  steps:
    - id: generate-runner-id
      name: Generate self-hosted runner ID
      run: |
        set -ex
        echo "runner-id=$(uuidgen)" >> "$GITHUB_OUTPUT"
      shell: bash
    - id: get-token
      name: Get self-hosted runner registration token
      run: |
        reg_token=$(curl -L \
          -X POST \
          -H 'Accept: application/vnd.github+json' \
          -H 'Authorization: Bearer ${{ inputs.gh-api-token }}' \
          -H 'X-GitHub-Api-Version: 2022-11-28' https://api.github.com/repos/${{ github.repository }}/actions/runners/registration-token \
          | jq -r .token)
        echo "::add-mask::$reg_token"
        echo "reg-token=$reg_token" >> "$GITHUB_OUTPUT"
      shell: bash
    - id: start-tailscale
      name: Start Tailscale
      uses: tailscale/github-action@v2
      with:
        oauth-client-id: ${{ inputs.ts-oauth-client-id }}
        oauth-secret: ${{ inputs.ts-oauth-secret }}
        tags: tag:${{ inputs.ts-tag }}
        version: ${{ inputs.ts-version }}
    - id: ssh-keyscan
      name: Run ssh-keyscan
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -T 60 ${{ inputs.ssh-host }} >> ~/.ssh/known_hosts
      shell: bash
    - id: install-cloud-utils
      name: Install cloud-utils
      run: sudo apt-get update && sudo apt-get --yes install cloud-utils
      shell: bash
    - id: seed-img
      name: Create seed.img
      run: |
        cat > meta-data <<EOF
        instance-id: ${{ steps.generate-runner-id.outputs.runner-id }}
        local-hostname: ${{ steps.generate-runner-id.outputs.runner-id }}
        EOF
        cat > user-data <<EOF
        #cloud-config
        apt:
          primary:
            - arches: [default]
              uri: ${{ inputs.gha-runner-apt-mirror }}
          sources:
            docker:
              source: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu noble stable'
              key: |
                -----BEGIN PGP PUBLIC KEY BLOCK-----
                
                mQINBFit2ioBEADhWpZ8/wvZ6hUTiXOwQHXMAlaFHcPH9hAtr4F1y2+OYdbtMuth
                lqqwp028AqyY+PRfVMtSYMbjuQuu5byyKR01BbqYhuS3jtqQmljZ/bJvXqnmiVXh
                38UuLa+z077PxyxQhu5BbqntTPQMfiyqEiU+BKbq2WmANUKQf+1AmZY/IruOXbnq
                L4C1+gJ8vfmXQt99npCaxEjaNRVYfOS8QcixNzHUYnb6emjlANyEVlZzeqo7XKl7
                UrwV5inawTSzWNvtjEjj4nJL8NsLwscpLPQUhTQ+7BbQXAwAmeHCUTQIvvWXqw0N
                cmhh4HgeQscQHYgOJjjDVfoY5MucvglbIgCqfzAHW9jxmRL4qbMZj+b1XoePEtht
                ku4bIQN1X5P07fNWzlgaRL5Z4POXDDZTlIQ/El58j9kp4bnWRCJW0lya+f8ocodo
                vZZ+Doi+fy4D5ZGrL4XEcIQP/Lv5uFyf+kQtl/94VFYVJOleAv8W92KdgDkhTcTD
                G7c0tIkVEKNUq48b3aQ64NOZQW7fVjfoKwEZdOqPE72Pa45jrZzvUFxSpdiNk2tZ
                XYukHjlxxEgBdC/J3cMMNRE1F4NCA3ApfV1Y7/hTeOnmDuDYwr9/obA8t016Yljj
                q5rdkywPf4JF8mXUW5eCN1vAFHxeg9ZWemhBtQmGxXnw9M+z6hWwc6ahmwARAQAB
                tCtEb2NrZXIgUmVsZWFzZSAoQ0UgZGViKSA8ZG9ja2VyQGRvY2tlci5jb20+iQI3
                BBMBCgAhBQJYrefAAhsvBQsJCAcDBRUKCQgLBRYCAwEAAh4BAheAAAoJEI2BgDwO
                v82IsskP/iQZo68flDQmNvn8X5XTd6RRaUH33kXYXquT6NkHJciS7E2gTJmqvMqd
                tI4mNYHCSEYxI5qrcYV5YqX9P6+Ko+vozo4nseUQLPH/ATQ4qL0Zok+1jkag3Lgk
                jonyUf9bwtWxFp05HC3GMHPhhcUSexCxQLQvnFWXD2sWLKivHp2fT8QbRGeZ+d3m
                6fqcd5Fu7pxsqm0EUDK5NL+nPIgYhN+auTrhgzhK1CShfGccM/wfRlei9Utz6p9P
                XRKIlWnXtT4qNGZNTN0tR+NLG/6Bqd8OYBaFAUcue/w1VW6JQ2VGYZHnZu9S8LMc
                FYBa5Ig9PxwGQOgq6RDKDbV+PqTQT5EFMeR1mrjckk4DQJjbxeMZbiNMG5kGECA8
                g383P3elhn03WGbEEa4MNc3Z4+7c236QI3xWJfNPdUbXRaAwhy/6rTSFbzwKB0Jm
                ebwzQfwjQY6f55MiI/RqDCyuPj3r3jyVRkK86pQKBAJwFHyqj9KaKXMZjfVnowLh
                9svIGfNbGHpucATqREvUHuQbNnqkCx8VVhtYkhDb9fEP2xBu5VvHbR+3nfVhMut5
                G34Ct5RS7Jt6LIfFdtcn8CaSas/l1HbiGeRgc70X/9aYx/V/CEJv0lIe8gP6uDoW
                FPIZ7d6vH+Vro6xuWEGiuMaiznap2KhZmpkgfupyFmplh0s6knymuQINBFit2ioB
                EADneL9S9m4vhU3blaRjVUUyJ7b/qTjcSylvCH5XUE6R2k+ckEZjfAMZPLpO+/tF
                M2JIJMD4SifKuS3xck9KtZGCufGmcwiLQRzeHF7vJUKrLD5RTkNi23ydvWZgPjtx
                Q+DTT1Zcn7BrQFY6FgnRoUVIxwtdw1bMY/89rsFgS5wwuMESd3Q2RYgb7EOFOpnu
                w6da7WakWf4IhnF5nsNYGDVaIHzpiqCl+uTbf1epCjrOlIzkZ3Z3Yk5CM/TiFzPk
                z2lLz89cpD8U+NtCsfagWWfjd2U3jDapgH+7nQnCEWpROtzaKHG6lA3pXdix5zG8
                eRc6/0IbUSWvfjKxLLPfNeCS2pCL3IeEI5nothEEYdQH6szpLog79xB9dVnJyKJb
                VfxXnseoYqVrRz2VVbUI5Blwm6B40E3eGVfUQWiux54DspyVMMk41Mx7QJ3iynIa
                1N4ZAqVMAEruyXTRTxc9XW0tYhDMA/1GYvz0EmFpm8LzTHA6sFVtPm/ZlNCX6P1X
                zJwrv7DSQKD6GGlBQUX+OeEJ8tTkkf8QTJSPUdh8P8YxDFS5EOGAvhhpMBYD42kQ
                pqXjEC+XcycTvGI7impgv9PDY1RCC1zkBjKPa120rNhv/hkVk/YhuGoajoHyy4h7
                ZQopdcMtpN2dgmhEegny9JCSwxfQmQ0zK0g7m6SHiKMwjwARAQABiQQ+BBgBCAAJ
                BQJYrdoqAhsCAikJEI2BgDwOv82IwV0gBBkBCAAGBQJYrdoqAAoJEH6gqcPyc/zY
                1WAP/2wJ+R0gE6qsce3rjaIz58PJmc8goKrir5hnElWhPgbq7cYIsW5qiFyLhkdp
                YcMmhD9mRiPpQn6Ya2w3e3B8zfIVKipbMBnke/ytZ9M7qHmDCcjoiSmwEXN3wKYI
                mD9VHONsl/CG1rU9Isw1jtB5g1YxuBA7M/m36XN6x2u+NtNMDB9P56yc4gfsZVES
                KA9v+yY2/l45L8d/WUkUi0YXomn6hyBGI7JrBLq0CX37GEYP6O9rrKipfz73XfO7
                JIGzOKZlljb/D9RX/g7nRbCn+3EtH7xnk+TK/50euEKw8SMUg147sJTcpQmv6UzZ
                cM4JgL0HbHVCojV4C/plELwMddALOFeYQzTif6sMRPf+3DSj8frbInjChC3yOLy0
                6br92KFom17EIj2CAcoeq7UPhi2oouYBwPxh5ytdehJkoo+sN7RIWua6P2WSmon5
                U888cSylXC0+ADFdgLX9K2zrDVYUG1vo8CX0vzxFBaHwN6Px26fhIT1/hYUHQR1z
                VfNDcyQmXqkOnZvvoMfz/Q0s9BhFJ/zU6AgQbIZE/hm1spsfgvtsD1frZfygXJ9f
                irP+MSAI80xHSf91qSRZOj4Pl3ZJNbq4yYxv0b1pkMqeGdjdCYhLU+LZ4wbQmpCk
                SVe2prlLureigXtmZfkqevRz7FrIZiu9ky8wnCAPwC7/zmS18rgP/17bOtL4/iIz
                QhxAAoAMWVrGyJivSkjhSGx1uCojsWfsTAm11P7jsruIL61ZzMUVE2aM3Pmj5G+W
                9AcZ58Em+1WsVnAXdUR//bMmhyr8wL/G1YO1V3JEJTRdxsSxdYa4deGBBY/Adpsw
                24jxhOJR+lsJpqIUeb999+R8euDhRHG9eFO7DRu6weatUJ6suupoDTRWtr/4yGqe
                dKxV3qQhNLSnaAzqW/1nA3iUB4k7kCaKZxhdhDbClf9P37qaRW467BLCVO/coL3y
                Vm50dwdrNtKpMBh3ZpbB1uJvgi9mXtyBOMJ3v8RZeDzFiG8HdCtg9RvIt/AIFoHR
                H3S+U79NT6i0KPzLImDfs8T7RlpyuMc4Ufs8ggyg9v3Ae6cN3eQyxcK3w0cbBwsh
                /nQNfsA6uu+9H7NhbehBMhYnpNZyrHzCmzyXkauwRAqoCbGCNykTRwsur9gS41TQ
                M8ssD1jFheOJf3hODnkKU+HKjvMROl1DK7zdmLdNzA1cvtZH/nCC9KPj1z8QC47S
                xx+dTZSx4ONAhwbS/LN3PoKtn8LPjY9NP9uDWI+TWYquS2U+KHDrBDlsgozDbs/O
                jCxcpDzNmXpWQHEtHU7649OXHP7UeNST1mCUCH5qdank0V1iejF6/CfTFU4MfcrG
                YT90qFF93M3v01BbxP+EIY2/9tiIPbrd
                =0YYh
                -----END PGP PUBLIC KEY BLOCK-----
            git-core:
              source: 'ppa:git-core/ppa'
            npm:
              source: 'deb [arch=amd64] https://deb.nodesource.com/node_20.x nodistro main'
              key: |
                -----BEGIN PGP PUBLIC KEY BLOCK-----

                mQENBFdDN1ABCADaNd/I3j3tn40deQNgz7hB2NvT+syXe6k4ZmdiEcOfBvFrkS8B
                hNS67t93etHsxEy7E0qwsZH32bKazMqe9zDwoa3aVImryjh6SHC9lMtW27JPHFeM
                Srkt9YmH1WMwWcRO6eSY9B3PpazquhnvbammLuUojXRIxkDroy6Fw4UKmUNSRr32
                9Ej87jRoR1B2/57Kfp2Y4+vFGGzSvh3AFQpBHq51qsNHALU6+8PjLfIt+5TPvaWR
                TB+kAZnQZkaIQM2nr1n3oj6ak2RATY/+kjLizgFWzgEfbCrbsyq68UoY5FPBnu4Z
                E3iDZpaIqwKr0seUC7iA1xM5eHi5kty1oB7HABEBAAG0Ik5Tb2xpZCA8bnNvbGlk
                LWdwZ0Bub2Rlc291cmNlLmNvbT6JATgEEwECACIFAldDN1ACGwMGCwkIBwMCBhUI
                AgkKCwQWAgMBAh4BAheAAAoJEC9ZtfmbG+C0y7wH/i4xnab36dtrYW7RZwL8i6Sc
                NjMx4j9+U1kr/F6YtqWd+JwCbBdar5zRghxPcYEq/qf7MbgAYcs1eSOuTOb7n7+o
                xUwdH2iCtHhKh3Jr2mRw1ks7BbFZPB5KmkxHaEBfLT4d+I91ZuUdPXJ+0SXs9gzk
                Dbz65Uhoz3W03aiF8HeL5JNARZFMbHHNVL05U1sTGTCOtu+1c/33f3TulQ/XZ3Y4
                hwGCpLe0Tv7g7Lp3iLMZMWYPEa0a7S4u8he5IEJQLd8bE8jltcQvrdr3Fm8kI2Jg
                BJmUmX4PSfhuTCFaR/yeCt3UoW883bs9LfbTzIx9DJGpRIu8Y0IL3b4sj/GoZVq5
                AQ0EV0M3UAEIAKrTaC62ayzqOIPa7nS90BHHck4Z33a2tZF/uof38xNOiyWGhT8u
                JeFoTTHn5SQq5Ftyu4K3K2fbbpuu/APQF05AaljzVkDGNMW4pSkgOasdysj831cu
                ssrHX2RYS22wg80k6C/Hwmh5F45faEuNxsV+bPx7oPUrt5n6GMx84vEP3i1+FDBi
                0pt/B/QnDFBXki1BGvJ35f5NwDefK8VaInxXP3ZN/WIbtn5dqxppkV/YkO7GiJlp
                Jlju9rf3kKUIQzKQWxFsbCAPIHoWv7rH9RSxgDithXtG6Yg5R1aeBbJaPNXL9wpJ
                YBJbiMjkAFaz4B95FOqZm3r7oHugiCGsHX0AEQEAAYkBHwQYAQIACQUCV0M3UAIb
                DAAKCRAvWbX5mxvgtE/OB/0VN88DR3Y3fuqy7lq/dthkn7Dqm9YXdorZl3L152eE
                IF882aG8FE3qZdaLGjQO4oShAyNWmRfSGuoH0XERXAI9n0r8m4mDMxE6rtP7tHet
                y/5M8x3CTyuMgx5GLDaEUvBusnTD+/v/fBMwRK/cZ9du5PSG4R50rtst+oYyC2ao
                x4I2SgjtF/cY7bECsZDplzatN3gv34PkcdIg8SLHAVlL4N5tzumDeizRspcSyoy2
                K2+hwKU4C4+dekLLTg8rjnRROvplV2KtaEk6rxKtIRFDCoQng8wfJuIMrDNKvqZw
                FRGt7cbvW5MCnuH8MhItOl9Uxp1wHp6gtav/h8Gp6MBa
                =MARt
                -----END PGP PUBLIC KEY BLOCK-----
        groups:
          - docker
          - users
        packages:
          - ca-certificates
          - containerd.io
          - curl
          - docker-buildx-plugin
          - docker-ce
          - docker-ce-cli
          - git
          - git-lfs
          - jq
          - nodejs
          - python3-fastapi
          - python3-pydantic
          - sudo
          - unzip
          - zip
        runcmd:
          - [ mkdir, -p, /opt/actions-runner ]
          - [ su, runner, --preserve-environment, -c, "/opt/actions-runner/setup.sh" ]
          - [ npm, install, --global, smee-client ]
          - [ smee, --url, ${{ inputs.smee-url }}, --path, /webhook, --port, 8000, "&" ]
          - [ su, runner, --preserve-environment, -c, "/opt/actions-runner/webhook.py", "&" ]
        timezone: "${{ inputs.gha-runner-tz }}"
        users:
          - name: runner
            groups: docker
            primary_group: users
            sudo: ALL=(ALL) NOPASSWD:ALL
        write_files:
          - content: |
              #!/usr/bin/python3
              from fastapi import FastAPI
              from pydantic import BaseModel
              from typing import List, Optional
              import os
              import sys


              class WorkflowStep(BaseModel):
                  name: str
                  status: str
                  conclusion: Optional[str]
                  number: int
                  started_at: Optional[str]
                  completed_at: Optional[str]


              class WorkflowJob(BaseModel):
                  id: int
                  run_id: int
                  run_url: str
                  run_attempt: int
                  node_id: str
                  head_sha: str
                  url: str
                  html_url: str
                  status: str
                  conclusion: Optional[str]
                  started_at: str
                  completed_at: Optional[str]
                  name: str
                  steps: List[WorkflowStep]
                  check_run_url: str
                  labels: List[str]
                  runner_id: Optional[int]
                  runner_name: Optional[str]
                  runner_group_id: Optional[int]
                  runner_group_name: Optional[str]
                  workflow_name: Optional[str]
                  head_branch: Optional[str]
                  created_at: str


              class Payload(BaseModel):
                  action: str
                  workflow_job: WorkflowJob


              app = FastAPI()


              @app.post("/webhook")
              async def github_webhook(payload: Payload):
                  if (
                      payload.action == "completed"
                      and payload.workflow_job.runner_name
                      == "${{ steps.generate-runner-id.outputs.runner-id }}"
                  ):
                      if sys.platform.startswith("linux"):
                          os.system("sudo shutdown -h now")
                          return {"message": "Shutdown initiated"}
                      else:
                          return {"error": "This endpoint only works on Linux systems"}
                  return {"error": "Invalid payload structure"}


              if __name__ == "__main__":
                  import uvicorn

                  uvicorn.run(app, host="127.0.0.1", port=8000)
            defer: true
            owner: runner:users
            path: /opt/actions-runner/webhook.py
            permissions: '0700'
          - content: |
              Package: nodejs
              Pin: origin deb.nodesource.com
              Pin-Priority: 600
            owner: root:root
            path: /etc/apt/preferences.d/nodejs
            permissions: '0644'
          - content: |
              Package: nsolid
              Pin: origin deb.nodesource.com
              Pin-Priority: 600
            owner: root:root
            path: /etc/apt/preferences.d/nsolid
            permissions: '0644'
          - content: |
              #!/bin/bash
              cd /opt/actions-runner
              curl -o actions-runner-linux-x64-${{ inputs.gha-runner-version }}.tar.gz -L https://github.com/actions/runner/releases/download/v${{ inputs.gha-runner-version }}/actions-runner-linux-x64-${{ inputs.gha-runner-version }}.tar.gz
              echo "${{ inputs.gha-runner-sha }}  actions-runner-linux-x64-${{ inputs.gha-runner-version }}.tar.gz" | shasum -a 256 -c
              tar xzf actions-runner-linux-x64-${{ inputs.gha-runner-version }}.tar.gz
              /opt/actions-runner/config.sh --url https://github.com/${{ github.repository }} --token ${{ steps.get-token.outputs.reg-token }} --ephemeral --unattended
              /opt/actions-runner/run.sh &
            defer: true
            owner: runner:users
            path: /opt/actions-runner/setup.sh
            permissions: '0700'
        EOF
        cloud-localds seed.img user-data meta-data
      shell: bash
    - id: start-runner
      name: Start self-hosted runner VM
      run: |
        ssh ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} \
          mkdir -p /tmp/actions-runners
        scp seed.img ${{ inputs.ssh-user }}@${{ inputs.ssh-host }}:/tmp/actions-runners/${{ steps.generate-runner-id.outputs.runner-id }}-seed.img
        ssh ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} \
          wget --progress=dot:mega -O /tmp/actions-runners/${{ steps.generate-runner-id.outputs.runner-id }}-runner.img \
          https://cloud-images.ubuntu.com/minimal/releases/noble/release/ubuntu-24.04-minimal-cloudimg-amd64.img
        ssh ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} \
          qemu-system-x86_64 -m ${{ inputs.gha-runner-mem }} \
          -drive file=/tmp/actions-runners/${{ steps.generate-runner-id.outputs.runner-id }}-runner.img,index=0,format=qcow2,media=disk \
          -drive file=/tmp/actions-runners/${{ steps.generate-runner-id.outputs.runner-id }}-seed.img,index=1,media=cdrom \
          -machine accel=kvm:tcg \
          -net nic,model=virtio \
          -net user \
          -nographic \
          -smp cpus=${{ inputs.gha-runner-cpus }}
      shell: bash
